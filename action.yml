name: 'Language Detector'
author: 'xander-rudolph'
branding:
  icon: 'north-star'
  color: 'green'
description: 'Detects langagues and their paths'
inputs:
  working_dir:
    description: "Working path for exec"
    required: false
    default: .
  fetch-depth:
    description: "Number of levels to check down for languages"
    required: false
    default: "1"
outputs:
  languagePaths:
    description: "All language paths"
    value: ${{ steps.language-detection.outputs.languagePaths }}
    
runs:
  using: composite
  steps:
    - name: Checkout repo
      uses: actions/checkout@v4
      with:
        path: lang-detector

    - name: Identify languages in each folder
      id: language-detection
      working-directory: lang-detector/${{ inputs.working_dir }}
      shell: pwsh
      run: |
        $result= @{}
        $depth=${{ inputs.fetch-depth }}
        $files = Get-ChildItem -Recurse -File -Depth $depth  
        foreach ($file in $files) {
            $pathName = Join-Path $($file.Directory.FullName -replace [regex]::Escape($PWD.Path), "") .
            if (-not $pathName) { $pathName = '.' }
            switch ($file.Extension.ToLowerInvariant()) {
                ".js"       { $result["JavaScript"] += @($pathName); break }
                ".ts"       { $result["TypeScript"] += @($pathName); break }
                ".java"     { $result["Java"] += @($pathName); break }
                ".py"       { $result["Python"] += @($pathName); break }
                ".cpp"      { $result["Cpp"] += @($pathName); break }
                ".go"       { $result["Go"] += @($pathName); break }
                ".rb"       { $result["Ruby"] += @($pathName); break }
                ".php"      { $result["PHP"] += @($pathName); break }
                ".swift"    { $result["Swift"] += @($pathName); break }
                ".kt"       { $result["Kotlin"] += @($pathName); break }
                ".scala"    { $result["Scala"] += @($pathName); break }
                ".rs"       { $result["Rust"] += @($pathName); break }
                ".dart"     { $result["Dart"] += @($pathName); break }
                ".html"     { $result["HTML"] += @($pathName); break }
                ".css"      { $result["CSS"] += @($pathName); break }
                ".xml"      { $result["XML"] += @($pathName); break }
                ".json"     { $result["JSON"] += @($pathName); break }
                ".sh"       { $result["Shell"] += @($pathName); break }
                ".ps1"      { $result["PowerShell"] += @($pathName); break }
                ".sql"      { $result["SQL"] += @($pathName); break }
                ".pl"       { $result["Perl"] += @($pathName); break }
                ".lua"      { $result["Lua"] += @($pathName); break }
                ".r"        { $result["R"] += @($pathName); break }
                ".m"        { $result["MATLAB"] += @($pathName); break }
                ".mm"       { $result["Objective-C++"] += @($pathName); break }
                ".hs"       { $result["Haskell"] += @($pathName); break }
                ".erl"      { $result["Erlang"] += @($pathName); break }
                ".clj"      { $result["Clojure"] += @($pathName); break }
                ".groovy"   { $result["Groovy"] += @($pathName); break }
                ".f90"      { $result["Fortran"] += @($pathName); break }
                ".vhdl"     { $result["VHDL"] += @($pathName); break }
                ".md"       { $result["Markdown"] += @($pathName); break }
                ".tex"      { $result["LaTeX"] += @($pathName); break }
                ".jl"       { $result["Julia"] += @($pathName); break }
                ".bat"      { $result["Batch"] += @($pathName); break }
                ".tsx"      { $result["TypeScript JSX"] += @($pathName); break }
                ".jsx"      { $result["JavaScript JSX"] += @($pathName); break }
                ".coffee"   { $result["CoffeeScript"] += @($pathName); break }
                ".rkt"      { $result["Racket"] += @($pathName); break }
                {
                    $_ -eq ".cs" `
                    -or $_ -eq ".csproj" `
                    -or $_ -eq ".sln"
                } { $result["C-sharp"] += @($pathName); break }
                {
                    $_ -eq ".c" `
                    -or $_ -eq ".h" `
                } { $result["C"] += @($pathName); break }
                {
                    $_ -eq ".yaml" `
                    -or $_ -eq ".yml" `
                } { $result["YAML"] += @($pathName); break }
                {
                    $_ -eq ".asm" `
                    -or $_ -eq ".s" `
                } { $result["Assembly"] += @($pathName); break }
            }
            # TODO: INSERT FUZZY STUFF HERE - it should be a passthru of some sort
            switch ($file.Name) {
                {$_ -like "Xander-Rudolph*"} { $result["Xanderu"] += @($pathName); break }
            }
        }
        $keys = $result.Keys | Sort-Object | Get-Unique
        foreach ($key in $keys) {
          $result[$key] = $result[$key] | Sort-Object | Get-Unique
        }
    
        $jsonOutput = $result | ConvertTo-Json -Compress
        Write-Warning "the following results found:`n $jsonOutput"
        # Escape the JSON output and ensure it's a single line so it can be used as an output
        $escapedJson = $jsonOutput -replace "\r", "" -replace "\n", ""
        Write-Warning "the following escaped string will be passed:`n $escapedJson"
        echo "languagePaths=$escapedJson" >> $env:GITHUB_OUTPUT
