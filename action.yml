name: 'Convert TRX output to a PR'
author: 'xander-rudolph'
branding:
  icon: 'north-star'
  color: 'green'
description: 'Parses a trx into a PR'
inputs:
  working_dir:
    description: "Working path for exec"
    required: false
    default: .
  trx_dir:
    description: "Directory to search for TRX files"
    required: false
    default: TestResults

runs:
  using: composite
  steps:
    - name: Setup Node
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Install Dependencies
      shell: bash
      run: |
        cd ${{ inputs.working_dir }}
        npm init -y
        npm install xmldom glob

    - name: Create TRX Parser Script
      shell: bash
      working-directory: ${{ inputs.working_dir }}
      run: |
        cat > trx-parser.js << 'EOF'
        const fs = require('fs');
        const { DOMParser } = require('xmldom');
        const glob = require('glob');

        module.exports = async ({ github, context, core }) => {
          const filePath = `${{ inputs.trx_dir }}/**/*.trx`;
          const files = glob.sync(filePath);

          if (files.length === 0) {
            core.setFailed(`No TRX report found in ${{ inputs.trx_dir }}`);
            return;
          }

          const file = files[0];
          let content;
          try {
            content = fs.readFileSync(file, 'utf8');
          } catch (error) {
            core.setFailed(`Failed to read the TRX report: ${error.message}`);
            return;
          }

          const parser = new DOMParser();
          const xmlDoc = parser.parseFromString(content, 'text/xml');

          const results = {
            total: 0,
            passed: 0,
            failed: 0,
            skipped: 0
          };

          const testResultNodes = xmlDoc.getElementsByTagName('UnitTestResult');
          
          for (let i = 0; i < testResultNodes.length; i++) {
            const result = testResultNodes[i];
            const outcome = result.getAttribute('outcome');

            results.total++;

            switch (outcome) {
              case 'Passed':
                results.passed++;
                break;
              case 'Failed':
                results.failed++;
                break;
              case 'NotExecuted':
                results.skipped++;
                break;
            }
          }

          const summary = `## Test Summary
          🧪 Total Tests: ${results.total}
          ✅ Passed Tests: ${results.passed}
          ❌ Failed Tests: ${results.failed}
          ⏩ Skipped Tests: ${results.skipped}

          Detailed report available in \`${file}\`.`;

          await github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: summary,
          });
        };
        EOF

    - name: Comment on PR with TRX summary
      uses: actions/github-script@v7
      with:
        script: |
          const parseTrxResults = require('./trx-parser.js')
          await parseTrxResults({ github, context, core })
